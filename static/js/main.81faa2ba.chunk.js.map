{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Components/Header.js","Components/CounterButton.js","Containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","_ref","robots","cardComponent","map","robot","i","Components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","Header","PureComponent","nextProps","nextState","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","Components_Header","Components_SearchBox","Components_Scroll","Components_ErrorBoundry","Components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.81faa2ba.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = (props) => {\r\n    const {name, email, id} = props;\r\n    \r\n    return(\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 zoom bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    //console.log('CardList')\r\n    const cardComponent = robots.map((robot, i) => {       \r\n        return (\r\n            <Card \r\n            key={robots[i].id} \r\n            id={robots[i].id} \r\n            name={robots[i].name} \r\n            email={robots[i].email}\r\n            />\r\n        );\r\n    })\r\n\r\n    return(\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    //console.log('SearchBox');\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input\r\n                className=\"pa3 ba b--green bg-lightest-blue\" \r\n                type=\"search\" \r\n                placeholder=\"search robots\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>        \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    //console.log(props);\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '3px solid black', height: '700px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Oooops. That is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        //console.log('Header');        \r\n        return(\r\n            <div>               \r\n                <h1 className=\"f1\">RoboFriends</h1>\r\n                {/* <CounterButton colo={'red'}/> */}\r\n            </div>            \r\n        );            \r\n    }\r\n}\r\n\r\nexport default Header","import React, {PureComponent} from 'react';\r\n\r\nclass CounterButton extends PureComponent {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        //console.log(nextProps, nextState);\r\n        //return true;\r\n        if (this.state.count !== nextState.count) {\r\n            return true;\r\n        } \r\n\r\n        return false              \r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return {count: state.count + 1}\r\n        })\r\n    }\r\n\r\n    render() {\r\n        //console.log('CounterButton');        \r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>\r\n                Count: {this.state.count}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterButton","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\n//import { robots } from './robots';\r\nimport './App.css';\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport Header from '../Components/Header';\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    /*constructor(){\r\n        super();\r\n        this.state = {\r\n            robots: []\r\n            //searchfield: ''\r\n        }\r\n        //console.log('constructor');\r\n    }*/\r\n\r\n    componentDidMount(){\r\n        //console.log(this.props.store.getState());\r\n        /*fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({ robots: users }));*/\r\n        //console.log('componentDidMount');\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    /*onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value });\r\n    }*/\r\n\r\n    render(){\r\n        //const {robots, /*searchfield*/} = this.state;\r\n        const{ searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        });\r\n        //console.log('render');\r\n        // return isPending ? \r\n        //     <h1 className=\"loading\">Loading...</h1> :\r\n        //     <div className=\"tc\">\r\n        //         <Header />\r\n        //         <SearchBox searchChange={onSearchChange}/>\r\n        //         <Scroll>\r\n        //             <ErrorBoundry>\r\n        //                 <CardList robots={filteredRobots}/>\r\n        //             </ErrorBoundry>                    \r\n        //         </Scroll>                  \r\n        //     </div>\r\n        return (\r\n            <div className='tc'>\r\n                <Header />\r\n                <SearchBox searchChange={onSearchChange}/>\r\n                <Scroll>\r\n                    { isPending ? <h1 className='loading'>Loading</h1> : \r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredRobots} /> \r\n                    </ErrorBoundry> }  \r\n                </Scroll>\r\n            </div>    \r\n        );              \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\r\n\r\nexport const setSearchField = (text) => {\r\n    //console.log(text);\r\n    return{\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n}\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ \r\n            type: REQUEST_ROBOTS_SUCCESS, \r\n            payload: data \r\n        }))\r\n        .catch(error => dispatch({\r\n            type: REQUEST_ROBOTS_FAILED,\r\n            payload: error\r\n        }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    //console.log(action.type)\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false });\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from \"./Containers/App.js\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nReactDOM.render(\r\n                <Provider store={store} >\r\n                    <App />\r\n                </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}